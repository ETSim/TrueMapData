"""
OBJ exporter implementation for TMD.

This module provides the OBJExporter class and related functions for exporting
height maps to OBJ format, which is widely supported across 3D modeling software.
"""

import os
import numpy as np
import logging
from typing import Optional, List, Tuple, Dict, Any, Union

from ..base import ModelExporter, ExportConfig, MeshData
from ..utils import validate_heightmap, ensure_directory_exists
from ..registry import register_exporter

# Set up logging
logger = logging.getLogger(__name__)


@register_exporter
class OBJExporter(ModelExporter):
    """Exporter for OBJ format."""
    
    # Class attributes
    format_name = "obj"
    file_extensions = ["obj"]
    binary_supported = False
    
    @classmethod
    def export(cls, height_map: np.ndarray, filename: str, config: ExportConfig) -> Optional[str]:
        """Export height map as OBJ file."""
        try:
            # Create mesh
            mesh = cls.create_mesh_from_heightmap(height_map, config)
            
            # Always generate UVs for OBJ
            config.generate_uvs = True
            
            # Prepare mesh using common utilities
            from ..utils.mesh_common import prepare_mesh_for_export
            processed_mesh = prepare_mesh_for_export(mesh, config.__dict__)
            if processed_mesh is None:
                return None
                
            # Export processed mesh
            write_obj(processed_mesh, filename, include_materials=True)
            
            return filename
            
        except Exception as e:
            logger.error(f"OBJ export failed: {e}")
            return None


def write_obj(
    mesh: MeshData, 
    filename: str,
    include_materials: bool = True
) -> None:
    """
    Write mesh data to an OBJ file.
    
    Args:
        mesh: MeshData object containing the mesh to export
        filename: Output filename
        include_materials: Whether to include material definitions
    """
    with open(filename, 'w') as f:
        # Write header
        f.write("# OBJ file generated by TMD exporter\n")
        
        # Reference material file if needed
        if include_materials:
            mtl_filename = os.path.splitext(os.path.basename(filename))[0] + ".mtl"
            f.write(f"mtllib {mtl_filename}\n")
            
            # Create MTL file
            create_mtl_file(os.path.join(os.path.dirname(filename), mtl_filename))
            
        # Write object name
        f.write(f"o HeightMap\n")
        
        # Write vertex data
        for v in mesh.vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        
        # Write texture coordinates
        if mesh.uvs is not None:
            for uv in mesh.uvs:
                f.write(f"vt {uv[0]:.6f} {uv[1]:.6f}\n")
        
        # Write normals
        if mesh.normals is not None:
            for n in mesh.normals:
                f.write(f"vn {n[0]:.6f} {n[1]:.6f} {n[2]:.6f}\n")
        
        # Apply material if available
        if include_materials:
            f.write("usemtl TerrainMaterial\n")
        
        # Write faces (OBJ uses 1-based indexing)
        # Format is: f v1/vt1/vn1 v2/vt2/vn2 v3/vt3/vn3
        for face in mesh.faces:
            indices = [i+1 for i in face]  # OBJ indices start at 1
            
            if mesh.uvs is not None and mesh.normals is not None:
                # Full format with vertices, UVs, and normals
                f.write(f"f {indices[0]}/{indices[0]}/{indices[0]} "
                        f"{indices[1]}/{indices[1]}/{indices[1]} "
                        f"{indices[2]}/{indices[2]}/{indices[2]}\n")
            elif mesh.uvs is not None:
                # Vertices and UVs
                f.write(f"f {indices[0]}/{indices[0]} "
                        f"{indices[1]}/{indices[1]} "
                        f"{indices[2]}/{indices[2]}\n")
            else:
                # Vertices only
                f.write(f"f {indices[0]} {indices[1]} {indices[2]}\n")


def create_mtl_file(mtl_filename: str) -> None:
    """
    Create a simple MTL material file for the OBJ.
    
    Args:
        mtl_filename: Path to the MTL file
    """
    with open(mtl_filename, 'w') as f:
        f.write("# MTL file generated by TMD exporter\n")
        f.write("newmtl TerrainMaterial\n")
        f.write("Ka 0.2 0.2 0.2\n")  # Ambient color
        f.write("Kd 0.8 0.8 0.8\n")  # Diffuse color
        f.write("Ks 0.1 0.1 0.1\n")  # Specular color
        f.write("Ns 100.0\n")        # Specular exponent (shininess)
        f.write("illum 2\n")         # Illumination model (2 = highlight on)